.PHONY: clean

log_link     = \033[36mLinking\033[0;1m $@\033[0m...
log_compile  = \033[33mCompiling\033[0;1m $<\033[0m...

ifdef V
log_tool     = $1
suppress     =
else
log_tool     = @echo '$2' && $1
suppress     = @
endif


define component_template
$$(build_dir)/$$($1_DIR): | $$(build_dir)
	@test -d $$@ || mkdir $$@

$$(build_dir)/$$($1_DIR)/%.o: $$(source_dir)/$$($1_DIR)/%.cpp | $$(build_dir)/$$($1_DIR)
	$$(call log_tool,$$(CXX),$$(log_compile)) $$(CXXFLAGS_EXTRA) $$(CXXFLAGS) -c -o '$$@' '$$<'
	
$$(build_dir)/$$($1_DIR)/%.o: $$(source_dir)/$$($1_DIR)/%.cc | $$(build_dir)/$$($1_DIR)
	$$(call log_tool,$$(CXX),$$(log_compile)) $$(CXXFLAGS_EXTRA) $$(CXXFLAGS) -c -o '$$@' '$$<'

-include $$(build_dir)/$$($1_DIR)/*.d
endef

define program_template
$$($1_BIN): $$(call for_components,$1,component_objects)
	$$(call log_tool,$$(CXX),$$(log_link)) $$(LDFLAGS_EXTRA) $$(LDFLAGS) -o '$$@' $$^ $$(call for_components,$1,component_libs)
	
all_programs += '$1'
endef

define clean_template
	$$(rm) -f '$1'
endef

component_objects = $($1_OBJS:%=$(build_dir)/$($1_DIR)/%.o)
component_libs    = $($1_LIBS:%=-l%)
for_components    = $(foreach component,$($1_COMPONENTS),$(call $2,$(component)))
define_component  = $(eval $(call component_template,$1))
define_components = $(foreach component,$1,$(call define_component,$(component)))
define_program    = $(eval $(call program_template,$1))

$(build_dir):
	$(suppress) mkdir '$@'

clean:
	$(suppress) rm -rf '$(build_dir)'
	$(suppress) rm -f $(all_programs)
